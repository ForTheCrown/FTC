import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes
import java.util.function.Consumer

plugins {
    id 'java'
    id 'io.papermc.paperweight.userdev' version '1.3.11'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

String minecraftVersion = "1.19.3"
boolean devBuild = isDebugBuild()
String nashornDependency = 'org.openjdk.nashorn:nashorn-core:15.4'

group = 'net.forthecrown'
version = minecraftVersion + "-" + buildID()

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

repositories {
    mavenCentral()

    maven { url = 'https://papermc.io/repo/repository/maven-public/' }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { url = 'https://maven.enginehub.org/repo/' }
    maven {
        name = 'BenCodez Repo'
        url = 'https://nexus.bencodez.com/repository/maven-public/'
    }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://mvn.intellectualsites.com/content/repositories/releases/' }
    maven { url = 'https://libraries.minecraft.net' }
    maven { url = 'https://repo.codemc.org/repository/maven-public/' }
    maven { url = 'https://nexus.scarsz.me/content/groups/public/' }
    maven { url = 'https://m2.dv8tion.net/releases' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'

    //Paper and NMS dependency
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:" + minecraftVersion + "-R0.1-SNAPSHOT")

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // Paper APIs
    compileOnly 'io.papermc.paper:paper-api:' + minecraftVersion + '-R0.1-SNAPSHOT'
    compileOnly 'io.papermc.paper:paper-mojangapi:' + minecraftVersion + '-R0.1-SNAPSHOT'

    compileOnly 'org.apache.commons:commons-lang3:3.12.0'

    // Mojang libraries
    compileOnly 'com.mojang:brigadier:1.0.18'
    compileOnly 'com.mojang:authlib:3.2.38'
    compileOnly 'com.mojang:datafixerupper:5.0.28'

    compileOnly 'org.mcteam.ancientgates:ancientgates:2.6'

    //Annotations????
    compileOnly 'org.jetbrains:annotations:23.0.0'

    //LuckPerms and WorldGuard
    compileOnly 'net.luckperms:api:5.4'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.5-SNAPSHOT'

    // DiscordSRV
    compileOnly 'com.discordsrv:discordsrv:1.26.0'

    testImplementation 'com.fastasyncworldedit:FastAsyncWorldEdit-Core:2.4.9'
    compileOnly 'com.fastasyncworldedit:FastAsyncWorldEdit-Core:2.4.9'

    //Grenadier, Dynmap and GSit
    libJar('Dynmap')
    libJar('GSit-1.2.8')
    libJar('VotingPlugin')
    libJar('EBS-1.1-SNAPSHOT')

    // Directly shaded libraries
    implementation "org.spongepowered:math:2.1.0-SNAPSHOT"
    implementation files("/libs/McAssetExtractor-1.0.jar")
    implementation files("/libs/Grenadier-1.6.1-dev.jar")

    // Libraries downloaded by Bukkit
    compileOnly nashornDependency
    compileOnly 'org.tomlj:tomlj:1.1.0'
    compileOnly 'org.apache.commons:commons-text:1.10.0'
}

void libJar(String s) {
    dependencies.compileOnly(files('/libs/' + s + '.jar'))
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

compileJava {
    options.compilerArgs += "-Xlint:all"
    options.compilerArgs += "-Xmaxwarns"
    options.compilerArgs += "300"
}

processResources {
    def props = [
            version: version,
            buildID : buildID() + "",
            buildDate : new Date().toString(),
            debug_build : devBuild,
            nashorn : nashornDependency
    ]

    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }

    // Work around to ensure all resource files keep their file
    // attributes during compilation, otherwise they all have their
    // modifiedDate set to the build time
    def copyDetails = []
    eachFile { copyDetails << it }

    doLast {
        copyDetails.each { FileCopyDetails details ->
            def target = new File(destinationDir, details.path)
            target.setLastModified(details.lastModified)
        }
    }
}

String getJarName() {
    return 'ForTheCrown-' + (isDebugBuild() ? "Debug" : "Plugin")
}

assemble {
    archivesBaseName = getJarName()
    dependsOn(reobfJar)
}

build {
    doLast {
        if (!devBuild) {
            incrementBuildID()
        }

        syncJarAttributes();
    }
}

reobfJar {
    doLast {
        syncJarAttributes();
    }
}

test {
    useJUnitPlatform()
}

void syncJarAttributes() {
    JarAttributeSync.sync(
            projectDir.toPath()
                    .resolve("src")
                    .resolve("main")
                    .resolve("resources"),

            buildDir.toPath()
                    .resolve("libs")
                    .resolve(getJarName() + "-" + getVersion() + ".jar"),
    );
}

/* ------------- Custom Task ------------- */

task build_to_test_server(dependsOn: build) {
    group 'build'
    description 'Builds the server\'s jar and moves it to the test server in test_server.properties'

    doLast {
        Properties properties = new Properties()

        try {
            FileInputStream stream = new FileInputStream("test_server.properties")
            properties.load(stream)
        } catch (IOException exc) {
            printf("Couldn't read test_server.properties!: %s", exc)
            return
        }

        String dir = properties.getProperty("test_server_directory")

        if (dir == null || dir.isEmpty()) {
            println("No test server directory found to move to!")
            return
        } else {
            printf("Moving plugin to dir: '%s'", dir)
        }

        Path path = Paths.get(dir)
        Path pluginsDir = path.resolve("plugins")

        String fileSuffix = String.format(
                "ForTheCrown-%s-%s.jar",
                devBuild ? "Debug" : "Plugin",
                version
        )

        Path dest = pluginsDir.resolve(fileSuffix)
        Path source = getBuildDir().toPath()
                .resolve("libs")
                .resolve(fileSuffix)

        syncJarAttributes()

        Files.copy(
                source, dest,
                StandardCopyOption.REPLACE_EXISTING,
                StandardCopyOption.COPY_ATTRIBUTES
        )

        String launchFile = properties.getProperty("launchFile")

        if (launchFile == null || launchFile.isEmpty()) {
            print("Launch options not given! Cannot start server")
            return
        }

        exec {
            workingDir path.toString()
            commandLine 'cmd', '/c', "start " + launchFile
        }
    }
}

/* ------------- Utility ------------- */

boolean isDebugBuild() {
    boolean result = false

    consumeProperties(p -> {
        result = Boolean.parseBoolean(p.getProperty("debug_build"))
    })

    return result
}

int buildID() {
    int result = 1

    consumeProperties(p -> {
        result = Integer.parseInt(p.getProperty("buildID"))
    })

    return result
}

void incrementBuildID() {
    consumeProperties(properties -> {
        int id = Integer.parseInt(properties.getProperty("buildID"))
        id++

        properties.setProperty("buildID", id + "")
    })
}

void consumeProperties(Consumer<Properties> propertiesConsumer) {
    File f = new File(project.projectDir, 'buildver.properties')
    Properties properties = new Properties()
    properties.load(new FileReader(f))

    propertiesConsumer.accept(properties)

    properties.store(new FileOutputStream(f), "Saves the last build ID and the debug build state, last build:")
}

public class JarAttributeSync {
    public static void sync(Path resourceDirectory, Path jarFile)
            throws IOException
    {
        URI uri = new URI("jar", jarFile.toUri().toString(), null);

        FileSystem fs;

        try {
            fs = FileSystems.getFileSystem(uri);
        } catch (FileSystemNotFoundException exc) {
            fs = FileSystems.newFileSystem(uri, Collections.singletonMap("create", "true"));
        }

        var walker = new AttributeWalker(resourceDirectory, fs);
        Files.walkFileTree(resourceDirectory, walker)
        fs.close()

        Files.copy(
                jarFile,
                jarFile.getParent().resolve("attributes_updated.jar"),
                StandardCopyOption.REPLACE_EXISTING,
                StandardCopyOption.COPY_ATTRIBUTES
        )
    }

    private static class AttributeWalker extends SimpleFileVisitor<Path> {
        private final Path resourcesSource;
        private final FileSystem jarFileSystem;

        public AttributeWalker(Path resourcesSource,
                               FileSystem jarFileSystem
        ) {
            this.resourcesSource = resourcesSource;
            this.jarFileSystem = jarFileSystem;
        }

        @Override
        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                throws IOException
        {
            var relative = resourcesSource.relativize(file).toString();
            var dest = jarFileSystem.getPath(relative)

            if (!Files.exists(dest)) {
                return FileVisitResult.CONTINUE;
            }

            var time = attrs.lastModifiedTime();
            Files.setLastModifiedTime(dest, time)

            return FileVisitResult.CONTINUE;
        }
    }
}